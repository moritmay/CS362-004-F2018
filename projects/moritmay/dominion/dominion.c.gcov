        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       45:    8:int compare(const void* a, const void* b) {
       45:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       45:   11:  if (*(int*)a < *(int*)b)
       12:   12:    return -1;
       33:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        4:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        3:  140:      state->deckCount[i] = 0;
       12:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        9:  143:	  state->deck[i][j] = estate;
        9:  144:	  state->deckCount[i]++;
        -:  145:	}
       24:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       21:  148:	  state->deck[i][j] = copper;
       21:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        4:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        3:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        4:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        3:  166:      state->handCount[i] = 0;
        3:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        3:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        3:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        3:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        3:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       36:  214:  while (state->deckCount[player] > 0) {
       30:  215:    card = floor(Random() * state->deckCount[player]);
       30:  216:    newDeck[newDeckPos] = state->deck[player][card];
       30:  217:    newDeckPos++;
       96:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       66:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       30:  221:    state->deckCount[player]--;
        -:  222:  }
       33:  223:  for (i = 0; i < newDeckPos; i++) {
       30:  224:    state->deck[player][i] = newDeck[i];
       30:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        3:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:	//Adventurer card function breakout
    #####:  648:  int adventurerCard(int currentPlayer, struct gameState *state){
    #####:  649:    int drawntreasure = 0;
        -:  650:    int cardDrawn;
        -:  651:    int temphand[MAX_HAND];
    #####:  652:    int z = 0;
        -:  653:
    #####:  654:    while(drawntreasure<2){
    #####:  655:	    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  656:	      shuffle(currentPlayer, state);
        -:  657:	    }
    #####:  658:	    drawCard(currentPlayer, state);
    #####:  659:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:	   //introduced bug, changed cardDrawn == copper to cardDrawn ==silver
    #####:  661:      if (cardDrawn == silver || cardDrawn == silver || cardDrawn == gold)
    #####:  662:	      drawntreasure++;
        -:  663:	    else{
    #####:  664:	      temphand[z]=cardDrawn;
    #####:  665:	      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	      z++;
        -:  667:	    }
        -:  668:    }
    #####:  669:    while(z-1>=0){
    #####:  670:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:	    z=z-1;
        -:  672:    }
    #####:  673:    return 0;
        -:  674:}
        -:  675:
    #####:  676:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:  677:  //+3 Cards
        -:  678:  //bug introduced, changed to add 4 cards instead of 3
    #####:  679:      for (int i = 0; i < 4; i++)
        -:  680:	{
    #####:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:      //discard card from hand
    #####:  684:      discardCard(handPos, currentPlayer, state, 0);
    #####:  685:  return 0;
        -:  686:}
        -:  687: 
    #####:  688:void villageCard(int currentPlayer, struct gameState *state, int handPos){ 
    #####:  689:  drawCard(currentPlayer, state);
        -:  690:  //+2 Actions
        -:  691:  //bug introduced to add 3 actions instead of 2
    #####:  692:  state->numActions = state->numActions + 3;
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
        1:  697:int great_hallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  698:  //+1 Card
        1:  699:  drawCard(currentPlayer, state);
        -:  700:	//+1 Actions
        1:  701:  state->numActions++;
        -:  702:	//discard card from hand
        1:  703:  discardCard(handPos, currentPlayer, state, 0);
        1:  704:  return 0;
        -:  705:}
        -:  706:
    #####:  707:void sea_hagCard(int currentPlayer, struct gameState *state){
        -:  708:  //introduced bug to have the for loop go to 1 less than the number of players
        -:  709:  //changed i < state->numPlayers to i < (state->numPlayers - 1)
    #####:  710:  for (int i = 0; i < (state->numPlayers -1); i++){
    #####:  711:	  if (i != currentPlayer){
    #####:  712:	    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  713:	    state->discardCount[i]++;
    #####:  714:	    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  715:	  }
        -:  716:  }
    #####:  717:}
        -:  718:
        1:  719:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  720:{
        -:  721:  int i;
        -:  722:  int j;
        -:  723:  int k;
        -:  724:  int x;
        -:  725:  int index;
        1:  726:  int currentPlayer = whoseTurn(state);
        1:  727:  int nextPlayer = currentPlayer + 1;
        -:  728:
        1:  729:  int tributeRevealedCards[2] = {-1, -1};
        -:  730:  int temphand[MAX_HAND];// moved above the if statement
        1:  731:  int drawntreasure=0;
        -:  732:  int cardDrawn;
        1:  733:  int z = 0;// this is the counter for the temp hand
        1:  734:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  735:    nextPlayer = 0;
        -:  736:  }
        -:  737:  
        -:  738:  //uses switch to select card and perform actions
        1:  739:  switch( card ) 
        -:  740:    {
        -:  741:    case adventurer:
    #####:  742:      adventurerCard(currentPlayer, state);
        -:  743:    //  return 0;
        -:  744:      /*while(drawntreasure<2){
        -:  745:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  746:	  shuffle(currentPlayer, state);
        -:  747:	}
        -:  748:	drawCard(currentPlayer, state);
        -:  749:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  750:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  751:	  drawntreasure++;
        -:  752:	else{
        -:  753:	  temphand[z]=cardDrawn;
        -:  754:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  755:	  z++;
        -:  756:	}
        -:  757:      }
        -:  758:      while(z-1>=0){
        -:  759:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  760:	z=z-1;
        -:  761:      }
        -:  762:      return 0;
        -:  763:			*/
        -:  764:
        -:  765:    case council_room:
        -:  766:      //+4 Cards
    #####:  767:      for (i = 0; i < 4; i++)
        -:  768:	{
    #####:  769:	  drawCard(currentPlayer, state);
        -:  770:	}
        -:  771:			
        -:  772:      //+1 Buy
    #####:  773:      state->numBuys++;
        -:  774:			
        -:  775:      //Each other player draws a card
    #####:  776:      for (i = 0; i < state->numPlayers; i++)
        -:  777:	{
    #####:  778:	  if ( i != currentPlayer )
        -:  779:	    {
    #####:  780:	      drawCard(i, state);
        -:  781:	    }
        -:  782:	}
        -:  783:			
        -:  784:      //put played card in played card pile
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
        -:  786:			
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case feast:
        -:  790:      //gain card with cost up to 5
        -:  791:      //Backup hand
    #####:  792:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  793:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  794:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  795:      }
        -:  796:      //Backup hand
        -:  797:
        -:  798:      //Update Coins for Buy
    #####:  799:      updateCoins(currentPlayer, state, 5);
    #####:  800:      x = 1;//Condition to loop on
    #####:  801:      while( x == 1) {//Buy one card
    #####:  802:	if (supplyCount(choice1, state) <= 0){
        -:  803:	  if (DEBUG)
        -:  804:	    printf("None of that card left, sorry!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  808:	  }
        -:  809:	}
    #####:  810:	else if (state->coins < getCost(choice1)){
    #####:  811:	  printf("That card is too expensive!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  815:	  }
        -:  816:	}
        -:  817:	else{
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
    #####:  823:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  824:	  x = 0;//No more buying cards
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
        -:  830:	}
        -:  831:      }     
        -:  832:
        -:  833:      //Reset Hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  835:	state->hand[currentPlayer][i] = temphand[i];
    #####:  836:	temphand[i] = -1;
        -:  837:      }
        -:  838:      //Reset Hand
        -:  839:      			
    #####:  840:      return 0;
        -:  841:			
        -:  842:    case gardens:
    #####:  843:      return -1;
        -:  844:			
        -:  845:    case mine:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:		
    #####:  853:      if (choice2 > treasure_map || choice2 < curse)
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      gainCard(choice2, state, 2, currentPlayer);
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:      //discard trashed card
    #####:  869:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  870:	{
    #####:  871:	  if (state->hand[currentPlayer][i] == j)
        -:  872:	    {
    #####:  873:	      discardCard(i, currentPlayer, state, 0);			
    #####:  874:	      break;
        -:  875:	    }
        -:  876:	}
        -:  877:			
    #####:  878:      return 0;
        -:  879:			
        -:  880:    case remodel:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      gainCard(choice2, state, 0, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
    #####:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
    #####:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
    #####:  898:	      discardCard(i, currentPlayer, state, 0);			
    #####:  899:	      break;
        -:  900:	    }
        -:  901:	}
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case smithy:
        -:  905:      //+3 Cards
    #####:  906:      smithyCard(currentPlayer, state, handPos);
        -:  907:      //return 0;
        -:  908:    /*  for (i = 0; i < 3; i++)
        -:  909:	{
        -:  910:	  drawCard(currentPlayer, state);
        -:  911:	}
        -:  912:			
        -:  913:      //discard card from hand
        -:  914:      discardCard(handPos, currentPlayer, state, 0);
        -:  915:      return 0;
        -:  916:*/		
        -:  917:    case village:
        -:  918:      //+1 Card
    #####:  919:      villageCard(currentPlayer, state, handPos);
    #####:  920:      return 0;
        -:  921:     /*
        -:  922:      drawCard(currentPlayer, state);
        -:  923:			
        -:  924:      //+2 Actions
        -:  925:      state->numActions = state->numActions + 2;
        -:  926:			
        -:  927:      //discard played card from hand
        -:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:      return 0;
        -:  930:      */
        -:  931:
        -:  932:    case baron:
    #####:  933:      state->numBuys++;//Increase buys by 1!
    #####:  934:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  935:	int p = 0;//Iterator for hand!
    #####:  936:	int card_not_discarded = 1;//Flag for discard set!
    #####:  937:	while(card_not_discarded){
    #####:  938:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  939:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  940:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  941:	    state->discardCount[currentPlayer]++;
    #####:  942:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  943:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  944:	    }
    #####:  945:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:	    state->handCount[currentPlayer]--;
    #####:  947:	    card_not_discarded = 0;//Exit the loop
        -:  948:	  }
    #####:  949:	  else if (p > state->handCount[currentPlayer]){
        -:  950:	    if(DEBUG) {
        -:  951:	      printf("No estate cards in your hand, invalid choice\n");
        -:  952:	      printf("Must gain an estate if there are any\n");
        -:  953:	    }
    #####:  954:	    if (supplyCount(estate, state) > 0){
    #####:  955:	      gainCard(estate, state, 0, currentPlayer);
    #####:  956:	      state->supplyCount[estate]--;//Decrement estates
    #####:  957:	      if (supplyCount(estate, state) == 0){
    #####:  958:		isGameOver(state);
        -:  959:	      }
        -:  960:	    }
    #####:  961:	    card_not_discarded = 0;//Exit the loop
        -:  962:	  }
        -:  963:			    
        -:  964:	  else{
    #####:  965:	    p++;//Next card
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:			    
        -:  970:      else{
    #####:  971:	if (supplyCount(estate, state) > 0){
    #####:  972:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  973:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  974:	  if (supplyCount(estate, state) == 0){
    #####:  975:	    isGameOver(state);
        -:  976:	  }
        -:  977:	}
        -:  978:      }
        -:  979:	    
        -:  980:      
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case great_hall:
        1:  984:      great_hallCard(currentPlayer, state, handPos);
        1:  985:      return 0;
        -:  986:      /*
        -:  987:      //+1 Card
        -:  988:      drawCard(currentPlayer, state);
        -:  989:			
        -:  990:      //+1 Actions
        -:  991:      state->numActions++;
        -:  992:			
        -:  993:      //discard card from hand
        -:  994:      discardCard(handPos, currentPlayer, state, 0);
        -:  995:      return 0;
        -:  996:		*/
        -:  997:    case minion:
        -:  998:      //+1 action
    #####:  999:      state->numActions++;
        -: 1000:			
        -: 1001:      //discard card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);
        -: 1003:			
    #####: 1004:      if (choice1)		//+2 coins
        -: 1005:	{
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:			
    #####: 1009:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1010:	{
        -: 1011:	  //discard hand
    #####: 1012:	  while(numHandCards(state) > 0)
        -: 1013:	    {
    #####: 1014:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //draw 4
    #####: 1018:	  for (i = 0; i < 4; i++)
        -: 1019:	    {
    #####: 1020:	      drawCard(currentPlayer, state);
        -: 1021:	    }
        -: 1022:				
        -: 1023:	  //other players discard hand and redraw if hand size > 4
    #####: 1024:	  for (i = 0; i < state->numPlayers; i++)
        -: 1025:	    {
    #####: 1026:	      if (i != currentPlayer)
        -: 1027:		{
    #####: 1028:		  if ( state->handCount[i] > 4 )
        -: 1029:		    {
        -: 1030:		      //discard hand
    #####: 1031:		      while( state->handCount[i] > 0 )
        -: 1032:			{
    #####: 1033:			  discardCard(handPos, i, state, 0);
        -: 1034:			}
        -: 1035:							
        -: 1036:		      //draw 4
    #####: 1037:		      for (j = 0; j < 4; j++)
        -: 1038:			{
    #####: 1039:			  drawCard(i, state);
        -: 1040:			}
        -: 1041:		    }
        -: 1042:		}
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case steward:
    #####: 1049:      if (choice1 == 1)
        -: 1050:	{
        -: 1051:	  //+2 cards
    #####: 1052:	  drawCard(currentPlayer, state);
    #####: 1053:	  drawCard(currentPlayer, state);
        -: 1054:	}
    #####: 1055:      else if (choice1 == 2)
        -: 1056:	{
        -: 1057:	  //+2 coins
    #####: 1058:	  state->coins = state->coins + 2;
        -: 1059:	}
        -: 1060:      else
        -: 1061:	{
        -: 1062:	  //trash 2 cards in hand
    #####: 1063:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1064:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1065:	}
        -: 1066:			
        -: 1067:      //discard card from hand
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case tribute:
    #####: 1072:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1073:	if (state->deckCount[nextPlayer] > 0){
    #####: 1074:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	  state->deckCount[nextPlayer]--;
        -: 1076:	}
    #####: 1077:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1078:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1079:	  state->discardCount[nextPlayer]--;
        -: 1080:	}
        -: 1081:	else{
        -: 1082:	  //No Card to Reveal
        -: 1083:	  if (DEBUG){
        -: 1084:	    printf("No cards to reveal\n");
        -: 1085:	  }
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
        -: 1089:      else{
    #####: 1090:	if (state->deckCount[nextPlayer] == 0){
    #####: 1091:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1092:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1093:	    state->deckCount[nextPlayer]++;
    #####: 1094:	    state->discard[nextPlayer][i] = -1;
    #####: 1095:	    state->discardCount[nextPlayer]--;
        -: 1096:	  }
        -: 1097:			    
    #####: 1098:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1099:	} 
    #####: 1100:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1101:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1102:	state->deckCount[nextPlayer]--;
    #####: 1103:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1104:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1105:	state->deckCount[nextPlayer]--;
        -: 1106:      }    
        -: 1107:		       
    #####: 1108:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1109:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1110:	state->playedCardCount++;
    #####: 1111:	tributeRevealedCards[1] = -1;
        -: 1112:      }
        -: 1113:
    #####: 1114:      for (i = 0; i <= 2; i ++){
    #####: 1115:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1116:	  state->coins += 2;
        -: 1117:	}
        -: 1118:		    
    #####: 1119:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1120:	  drawCard(currentPlayer, state);
    #####: 1121:	  drawCard(currentPlayer, state);
        -: 1122:	}
        -: 1123:	else{//Action Card
    #####: 1124:	  state->numActions = state->numActions + 2;
        -: 1125:	}
        -: 1126:      }
        -: 1127:	    
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case ambassador:
    #####: 1131:      j = 0;		//used to check if player has enough cards to discard
        -: 1132:
    #####: 1133:      if (choice2 > 2 || choice2 < 0)
        -: 1134:	{
    #####: 1135:	  return -1;				
        -: 1136:	}
        -: 1137:
    #####: 1138:      if (choice1 == handPos)
        -: 1139:	{
    #####: 1140:	  return -1;
        -: 1141:	}
        -: 1142:
    #####: 1143:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	{
    #####: 1145:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1146:	    {
    #####: 1147:	      j++;
        -: 1148:	    }
        -: 1149:	}
    #####: 1150:      if (j < choice2)
        -: 1151:	{
    #####: 1152:	  return -1;				
        -: 1153:	}
        -: 1154:
        -: 1155:      if (DEBUG) 
        -: 1156:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1157:
        -: 1158:      //increase supply count for choosen card by amount being discarded
    #####: 1159:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1160:			
        -: 1161:      //each other player gains a copy of revealed card
    #####: 1162:      for (i = 0; i < state->numPlayers; i++)
        -: 1163:	{
    #####: 1164:	  if (i != currentPlayer)
        -: 1165:	    {
    #####: 1166:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1167:	    }
        -: 1168:	}
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
        -: 1173:      //trash copies of cards returned to supply
    #####: 1174:      for (j = 0; j < choice2; j++)
        -: 1175:	{
    #####: 1176:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1177:	    {
    #####: 1178:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1179:		{
    #####: 1180:		  discardCard(i, currentPlayer, state, 1);
    #####: 1181:		  break;
        -: 1182:		}
        -: 1183:	    }
        -: 1184:	}			
        -: 1185:
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case cutpurse:
        -: 1189:
    #####: 1190:      updateCoins(currentPlayer, state, 2);
    #####: 1191:      for (i = 0; i < state->numPlayers; i++)
        -: 1192:	{
    #####: 1193:	  if (i != currentPlayer)
        -: 1194:	    {
    #####: 1195:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1196:		{
    #####: 1197:		  if (state->hand[i][j] == copper)
        -: 1198:		    {
    #####: 1199:		      discardCard(j, i, state, 0);
    #####: 1200:		      break;
        -: 1201:		    }
    #####: 1202:		  if (j == state->handCount[i])
        -: 1203:		    {
    #####: 1204:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1205:			{
        -: 1206:			  if (DEBUG)
        -: 1207:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1208:			}	
    #####: 1209:		      break;
        -: 1210:		    }		
        -: 1211:		}
        -: 1212:					
        -: 1213:	    }
        -: 1214:				
        -: 1215:	}				
        -: 1216:
        -: 1217:      //discard played card from hand
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1219:
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:		
        -: 1223:    case embargo: 
        -: 1224:      //+2 Coins
    #####: 1225:      state->coins = state->coins + 2;
        -: 1226:			
        -: 1227:      //see if selected pile is in play
    #####: 1228:      if ( state->supplyCount[choice1] == -1 )
        -: 1229:	{
    #####: 1230:	  return -1;
        -: 1231:	}
        -: 1232:			
        -: 1233:      //add embargo token to selected supply pile
    #####: 1234:      state->embargoTokens[choice1]++;
        -: 1235:			
        -: 1236:      //trash card
    #####: 1237:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1238:      return 0;
        -: 1239:		
        -: 1240:    case outpost:
        -: 1241:      //set outpost flag
    #####: 1242:      state->outpostPlayed++;
        -: 1243:			
        -: 1244:      //discard card
    #####: 1245:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1246:      return 0;
        -: 1247:		
        -: 1248:    case salvager:
        -: 1249:      //+1 buy
    #####: 1250:      state->numBuys++;
        -: 1251:			
    #####: 1252:      if (choice1)
        -: 1253:	{
        -: 1254:	  //gain coins equal to trashed card
    #####: 1255:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1256:	  //trash card
    #####: 1257:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1258:	}
        -: 1259:			
        -: 1260:      //discard card
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1262:      return 0;
        -: 1263:		
        -: 1264:    case sea_hag:
    #####: 1265:      sea_hagCard(currentPlayer, state);
    #####: 1266:      return 0;
        -: 1267:    /*
        -: 1268:      for (i = 0; i < state->numPlayers; i++){
        -: 1269:	if (i != currentPlayer){
        -: 1270:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1271:	  state->discardCount[i]++;
        -: 1272:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1273:	}
        -: 1274:      }
        -: 1275:      return 0;
        -: 1276:		*/
        -: 1277:
        -: 1278:    case treasure_map:
        -: 1279:      //search hand for another treasure_map
    #####: 1280:      index = -1;
    #####: 1281:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1282:	{
    #####: 1283:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1284:	    {
    #####: 1285:	      index = i;
    #####: 1286:	      break;
        -: 1287:	    }
        -: 1288:	}
    #####: 1289:      if (index > -1)
        -: 1290:	{
        -: 1291:	  //trash both treasure cards
    #####: 1292:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1293:	  discardCard(index, currentPlayer, state, 1);
        -: 1294:
        -: 1295:	  //gain 4 Gold cards
    #####: 1296:	  for (i = 0; i < 4; i++)
        -: 1297:	    {
    #####: 1298:	      gainCard(gold, state, 1, currentPlayer);
        -: 1299:	    }
        -: 1300:				
        -: 1301:	  //return success
    #####: 1302:	  return 1;
        -: 1303:	}
        -: 1304:			
        -: 1305:      //no second treasure_map found in hand
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
    #####: 1309:  return -1;
        -: 1310:}
        -: 1311:
        1: 1312:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1313:{
        -: 1314:	
        -: 1315:  //if card is not trashed, added to Played pile 
        1: 1316:  if (trashFlag < 1)
        -: 1317:    {
        -: 1318:      //add card to played pile
        1: 1319:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1320:      state->playedCardCount++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //set played card to -1
        1: 1324:  state->hand[currentPlayer][handPos] = -1;
        -: 1325:	
        -: 1326:  //remove card from player's hand
        1: 1327:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1328:    {
        -: 1329:      //reduce number of cards in hand
    #####: 1330:      state->handCount[currentPlayer]--;
        -: 1331:    }
        1: 1332:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1333:    {
        -: 1334:      //reduce number of cards in hand
    #####: 1335:      state->handCount[currentPlayer]--;
        -: 1336:    }
        -: 1337:  else 	
        -: 1338:    {
        -: 1339:      //replace discarded card with last card in hand
        1: 1340:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1341:      //set last card to -1
        1: 1342:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1343:      //reduce number of cards in hand
        1: 1344:      state->handCount[currentPlayer]--;
        -: 1345:    }
        -: 1346:	
        1: 1347:  return 0;
        -: 1348:}
        -: 1349:
    #####: 1350:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1351:{
        -: 1352:  //Note: supplyPos is enum of choosen card
        -: 1353:	
        -: 1354:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1355:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1356:    {
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
        -: 1360:  //added card for [whoseTurn] current player:
        -: 1361:  // toFlag = 0 : add to discard
        -: 1362:  // toFlag = 1 : add to deck
        -: 1363:  // toFlag = 2 : add to hand
        -: 1364:
    #####: 1365:  if (toFlag == 1)
        -: 1366:    {
    #####: 1367:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1368:      state->deckCount[player]++;
        -: 1369:    }
    #####: 1370:  else if (toFlag == 2)
        -: 1371:    {
    #####: 1372:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1373:      state->handCount[player]++;
        -: 1374:    }
        -: 1375:  else
        -: 1376:    {
    #####: 1377:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1378:      state->discardCount[player]++;
        -: 1379:    }
        -: 1380:	
        -: 1381:  //decrease number in supply pile
    #####: 1382:  state->supplyCount[supplyPos]--;
        -: 1383:	 
    #####: 1384:  return 0;
        -: 1385:}
        -: 1386:
        1: 1387:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1388:{
        -: 1389:  int i;
        -: 1390:	
        -: 1391:  //reset coin count
        1: 1392:  state->coins = 0;
        -: 1393:
        -: 1394:  //add coins for each Treasure card in player's hand
        6: 1395:  for (i = 0; i < state->handCount[player]; i++)
        -: 1396:    {
        5: 1397:      if (state->hand[player][i] == copper)
        -: 1398:	{
        4: 1399:	  state->coins += 1;
        -: 1400:	}
        1: 1401:      else if (state->hand[player][i] == silver)
        -: 1402:	{
    #####: 1403:	  state->coins += 2;
        -: 1404:	}
        1: 1405:      else if (state->hand[player][i] == gold)
        -: 1406:	{
    #####: 1407:	  state->coins += 3;
        -: 1408:	}	
        -: 1409:    }	
        -: 1410:
        -: 1411:  //add bonus
        1: 1412:  state->coins += bonus;
        -: 1413:
        1: 1414:  return 0;
        -: 1415:}
        -: 1416:
        -: 1417:
        -: 1418://end of dominion.c
        -: 1419:
