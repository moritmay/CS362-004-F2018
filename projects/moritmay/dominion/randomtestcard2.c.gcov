        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://random test card 2
        -:    2://validating that the state of whose turn is correct
        -:    3:  
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <time.h>
        -:   12:#include <stdlib.h>
        -:   13:
        1:   14:int main(){
        -:   15:  struct gameState state;
        1:   16:  int k[10] = {adventurer, gardens, embargo, village, great_hall, mine, cutpurse,
        -:   17:  sea_hag, tribute, smithy};
        -:   18:  int p;
        1:   19:  srand(time(0));
        -:   20:  
      201:   21:  for (int testRun = 0; testRun < 200; testRun++){
        -:   22:    //randomize number of players from 0-5
      200:   23:    p = (rand()%6);
        -:   24:
      200:   25:    initializeGame(p, k, rand(), &state);
      200:   26:    int player = whoseTurn(&state);
        -:   27:
      200:   28:    if (player > state.numPlayers || p == 0){
       30:   29:        printf("whoseTurn test failed\n");
        -:   30:    }
      200:   31:    if (player < state.numPlayers) {
      199:   32:        printf("whoseTurn test passed\n");
        -:   33:    }
        1:   34:    else if (player == 0){
        1:   35:	printf("whoseTurn test failed\n");
        -:   36:    }	  
        -:   37:
        -:   38:  }
        1:   39:  return 0;
        -:   40:}
